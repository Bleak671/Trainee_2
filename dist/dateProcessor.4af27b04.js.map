{"version":3,"sources":["js/dateProcessor.js"],"names":["dateProcessor","DateParser","inString","date","Date","toString","DateParserWithPattern","inPattern","GetParsedString","DateParserToPattern","toPattern","PasteDate","DateParserWithPatternToPattern","this","innerDate","i","indexOf","result","length","getDate","getMonth","getFullYear","module","exports"],"mappings":"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","file":"dateProcessor.4af27b04.js","sourceRoot":"..","sourcesContent":["var dateProcessor = {\r\n  DateParser: function(inString) {\r\n    let date = new Date(inString);\r\n    return date.toString();\r\n  },\r\n\r\n  DateParserWithPattern: function(inString, inPattern) {\r\n    let date = new Date(this.GetParsedString(inString, inPattern));\r\n    return date.toString();\r\n  },\r\n\r\n  DateParserToPattern: function(inString, toPattern) {\r\n    let date = new Date(inString);\r\n    return PasteDate(date, toPattern);\r\n  },\r\n\r\n  DateParserWithPatternToPattern: function(inString, inPattern, toPattern) {\r\n    let date = new Date(this.GetParsedString(inString, inPattern));\r\n    return PasteDate(date, toPattern);\r\n  },\r\n\r\n  this:GetParsedString = function(inString, inPattern) {\r\n    let innerDate = \"\";\r\n    for (let i = inPattern.indexOf('D'); inPattern[i] == 'D'; i++) {\r\n      innerDate += inString[i];\r\n    }\r\n    innerDate += '.';\r\n\r\n    for (let i = inPattern.indexOf('M'); inPattern[i] == 'M'; i++) {\r\n      innerDate += inString[i];\r\n    }\r\n    innerDate += '.';\r\n\r\n    for (let i = inPattern.indexOf('Y'); inPattern[i] == 'Y'; i++) {\r\n      innerDate += inString[i];\r\n    }\r\n\r\n    return innerDate;\r\n  },\r\n\r\n  this:PasteDate = function(date, toPattern) {\r\n    let result = \"\";\r\n    let i = 0;\r\n    while (i < toPattern.length) {\r\n        switch (toPattern[i]) {\r\n            case 'D' :\r\n                result += date.getDate();\r\n                i++;\r\n                break;\r\n            case 'M' :\r\n                result += date.getMonth() + 1;\r\n                i++;\r\n                break;\r\n            case 'Y' :\r\n                result += date.getFullYear();\r\n                i += 3;\r\n                break;\r\n            default:\r\n                result += toPattern[i];\r\n                break;\r\n        }\r\n        i++;\r\n    }\r\n    return result;\r\n  }\r\n}\r\n\r\nmodule.exports = { dateProcessor };  "]}